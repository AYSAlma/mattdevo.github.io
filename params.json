{
  "name": "MrChromebox.tech",
  "tagline": "Tips, Tweaks, and custom firmware for your ChromeOS device",
  "body": "### Coming Soon, I swear!\r\n\r\nin the meantime, here's the readme from my github repo for the ChromeOS Firmware Utility scripts:\r\n\r\n## ChromeOS firmware utility and Kodi install scripts\r\nThese scripts allow the user to install custom firmware (aka a \"full ROM\"), install/update the legacy boot payload for stock firmware, and install Kodi on supported ChromeOS devices. When run from ChromeOS, these scripts require the Chromebox/book to be in [developer mode](https://www.chromium.org/chromium-os/poking-around-your-chrome-os-device#TOC-Putting-your-Chrome-OS-Device-into-Developer-Mode); some functionality also requires the firmware write-protect screw to be removed, the location of which is [device-specific](https://www.chromium.org/chromium-os/developer-information-for-chrome-os-devices). \r\n\r\n&nbsp;\r\n\r\n**setup-firmware.sh** allows for the installation of custom firmware (full ROM) and/or an updated legacy boot payload (via either the RW_LEGACY or BOOT_STUB firmware regions) on supported ChromeOS devices.\r\n\r\nIt also includes functionality to set the stock firmware boot (GBB) flags and to set the device's hardware ID (via gbb_utility). This script can be used to restore the stock firmware on a Haswell, Broadwell, or Baytrail ChromeBox, either from a backup file (on USB) or from a generic recovery image firmware file (which it will automatically download for you).  If the latter is used, the device-specific VPD (vital product data) is extracted from the running firmware and merged with the generic firmware file, to ensure the device's unique MAC address, serial #, etc are maintained. On Baytrail devices, when flashing the BOOT_STUB, a backup is automatically saved in the (unused) RW_LEGACY region, from which it can later be restored (via this same script).\r\n\r\n\r\nSupported Devices:\r\n\r\nfunction| Haswell/Broadwell | BayTrail | WP Disable req. |  notes\r\n-----| :-----: | :-----: | :-----: | :-----: | -----\r\nInstall/Update RW_LEGACY Payload|:white_check_mark:|:white_check_mark:|\r\nInstall/Update BOOT_STUB Payload|:x:|:white_check_mark:|:white_check_mark:|\r\nInstall/Update coreboot Firmware (Full ROM)|:white_check_mark:|:x:|:white_check_mark:|Samsung Series 3 ChromeBox also supported; Chromebook support via coolstar's ROMs\r\nSet Firmware Boot Options|:white_check_mark:|:white_check_mark:|:white_check_mark:|All x86 ChromeOS devices supported\r\nSet Hardware ID|:white_check_mark:|:white_check_mark:|:white_check_mark:|All ChromeOS devices supported\r\nRestore Stock BOOT_STUB|:x:|:white_check_mark:|:white_check_mark:|\r\nRestore Stock Firmware|:white_check_mark:|:x:|:white_check_mark:|\r\n\r\nTo download and run this script, from a terminal shell:  \r\n`cd;  \r\ncurl -L -O http://mrchromebox.tech/firmware-util.sh \r\nsudo bash firmware-util.sh`\r\n\r\n&nbsp;\r\n\r\n**setup-kodi.sh** facilitates the installation of Kodi on supported ChromeOS devices via the installation of either an updated legacy boot payload (RW_LEGACY) or custom firmware (full ROM).\r\n\r\nSupported Devices:\r\n\r\nfunction| Haswell/Broadwell Chromebox | Haswell/Broadwell Chromebook | BayTrail | WP Disable | notes\r\n----- | :-----: | :-----: | :-----: | :-----: |-----\r\nDual Boot (LibreELEC/GalliumOS)|:white_check_mark:|:white_check_mark:|:white_check_mark:| |automatically updates legacy boot payload (RW_LEGACY) as needed\r\nUpdate Legacy Boot Payload|:white_check_mark:|:white_check_mark:|:white_check_mark:|\r\nSet Firmware Boot Options|:white_check_mark:|:white_check_mark:|:white_check_mark:|:white_check_mark:|\r\nInstall/Update Custom coreboot Firmware|:white_check_mark:|:x:|:x:|:white_check_mark:|Samsung Series 3 ChromeBox also supported\r\nCreate LibreELEC boot media|:white_check_mark:|:white_check_mark:| | |added solely for convenience\r\n\r\nThis script allows the user to install a dual-boot setup with either LibreELEC or GalliumOS\r\n(with or without Kodi), to set the default OS, and to set the boot timeout on the \r\ndeveloper mode splash screen.  It also provides for the installation of an updated\r\nlegacy boot payload (in the RW_LEGACY firmware slot) for devices that need it.\r\n\r\nIt also allows the user to flash custom firmware (full ROM), turning a ChromeBox into a regular PC, and provides for the creation of installation media for LibreELEC; though with the custom firmware, any off-the-shelf OS can be installed (including Windows 8.1/10).\r\n\r\nsetup-kodi.sh will run on any Linux system with a full bash shell; the dual-boot functionality is restricted to ChromeOS.\r\n\r\nTo download and run this script, from a terminal shell:  \r\n`cd; curl -L -O http://mrchromebox.tech/setup-kodi.sh; sudo bash setup-kodi.sh`\r\n\r\nMore details and support for this script can be found at:  \r\nhttp://forum.kodi.tv/showthread.php?tid=194362\r\n\r\n&nbsp;\r\n\r\n**cbox-firmware-update.sh** exists solely to update the custom firmware (full ROM) on Haswell ChromeBoxes running\r\nOpen/LibreELEC, which cannot run the above scripts due to lack of a full Bash shell.\r\n\r\nSupported Devices:\r\n\r\nfunction| Haswell Chromebox | Haswell/Broadwell Chromebook | BayTrail | notes\r\n----- | :-----: | :-----: | :-----: | -----\r\nUpdate Custom coreboot Firmware|:white_check_mark:|:x:|:x:|must already be running custom coreboot firmware, not stock\r\n\r\nThis script will automatically check to see if an updated firmware is available, and if so, prompt the user to update.  Install-time options include ability to boot without a connected display (\"headless\" option) and ability to set the default device to USB (vs internal ssd). \r\n\r\nTo download and run this script, from a ssh shell:  \r\n`cd; curl -L -O http://mrchromebox.tech/cbox-firmware-update.sh; bash cbox-firmware-update.sh`",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}